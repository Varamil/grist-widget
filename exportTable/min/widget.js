(function(t){typeof define=="function"&&define.amd?define(t):t()})(function(){"use strict";let t,l,f=[WidgetSDK.newItem("table",null,"Target table","Select which table to manage.","Table",{type:"dropdown",event:{onchange:"selectionTable(this)"}})],d=[WidgetSDK.newItem("colaon",!0,"Selection","Select all columns or nothing.","Table structure",{event:{onClick:"switchColumns()"}}),WidgetSDK.newItem("columns",!0,"Columns","Select which columns to copy.","Table structure",{template:WidgetSDK.newItem("column_export",!0,"Copy","If checked, copy the column metadata.")}),WidgetSDK.newItem("export",null,"Copy","Copy metadata to the clipboard.","Table structure",{event:{onClick:"exporter()"},label:"Copy"}),WidgetSDK.newItem("import",null,"Paste","Paste metadata from the clipboard.","Table structure",{event:{onClick:"importer()"},label:"Paste"}),WidgetSDK.newItem("column",null,"Target column","Select which column to manage.","Column",{type:"dropdown",event:{onchange:"selectionColumn(this)"}})],h=[WidgetSDK.newItem("propaon",!0,"Selection","Select all properties or nothing.","Column properties",{event:{onClick:"switchProp()"}}),WidgetSDK.newItem("properties",null,"Properties","Select which properties to copy.","Column properties",{template:WidgetSDK.newItem("property_export",!0,"Copy","If checked, copy the property.")}),WidgetSDK.newItem("copy",null,"Copy","Copy properties to the clipboard.","Column properties",{event:{onClick:"copyProp()"},label:"Copy"}),WidgetSDK.newItem("paste",null,"Paste","Paste properties from the clipboard.","Column properties",{event:{onClick:"pasteProp()"},label:"Paste"})],e={},c,u,m;const g=["colId","type","widgetOptions","isFormula","formula","label","description","recalcWhen"],y=["Type","Options","Is formula","Formula","Label","Description","Recalc trigger"];window.addEventListener("load",async n=>{t=new WidgetSDK,l=await t.loadTranslations(["widget.js"]),t.initMetaData(!0),t.configureOptions([],"#config-view","#main-view",{}),t.ready({requiredAccess:"full",allowSelectBy:!1}),t.isLoaded().then(async()=>{t.parseOptions(f),t.parseOptions(d),t.parseOptions(h),t.initDone=!0,p()}),t.onMappingChange(p)});async function p(){if(t.initDone){const n=document.getElementById("main-view"),i=[""].concat(await grist.docApi.listTables());let s=t.getOptionsHtml(f,{table:c},{table:i});if(c){const a=w(u);e.columns||(e.colaon=!0,e.columns=a.map(o=>!0)),s+=t.getOptionsHtml(d,e,{columns:!0,column_export:a,column:[""].concat(a)}),m&&(e.properties||(e.propaon=!0,e.properties=g.slice(1).map(o=>!0)),s+=t.getOptionsHtml(h,e,{properties:!0,property_export:l(y)}))}s+=`<div style="color:red"><p>${l("This widget affects the structure of tables, so even though it has been tested in various situations, it is possible that the document may become corrupted after applying the changes.")}</p>
      <p>${l("It is always strongly recommended to use the Work on a copy feature provided by Grist, and then, if everything went well, apply the changes to the main document.")}</p>
      <p>${l("The widget is therefore provided as it is, and the author cannot be held responsible for any problems that the widget may cause.")}</p></div>`,n.innerHTML=s,t.setOptionsEvent(n)}}async function b(n){c=n.value,m=void 0,u=c?await t.meta.getMeta(c):void 0,e={},p()}async function C(n){m=n.value,e.column=m,p()}async function v(){e.columns&&(await t.readOptionValues(d,document.getElementById("main-view"),e),e.colaon=!e.colaon,e.columns=e.columns.map(n=>e.colaon),p())}async function S(){e.properties&&(await t.readOptionValues(h,document.getElementById("main-view"),e),e.propaon=!e.propaon,e.properties=e.properties.map(n=>e.propaon),p())}async function O(){const n=w(u);await t.readOptionValues(d,document.getElementById("main-view"),e);let i=[];n.forEach((s,a)=>{if(e.columns[a]){const o=u[s];i.push([o.colId,Object.fromEntries(g.map(r=>r==="widgetOptions"&&o[r]?[r,JSON.stringify(o[r])]:[r,o[r]]).filter(r=>!!r[1]))])}}),i.length>0?(await navigator.clipboard.writeText(JSON.stringify(i)),alert(l("Data has been copied into the clipboard."))):alert(l("No data to copy."))}async function I(){const n=await navigator.clipboard.readText();if(n){const i=JSON.parse(n);if(Array.isArray(i)&&i.length>0&&Array.isArray(i[0])&&i[0].length===2){const s=w(u);let a=[];i.forEach(o=>{o[1]&&(o[1]=Object.fromEntries(Object.entries(o[1]).filter(r=>!!r[1]))),o[1]&&o[1].widgetOptions&&typeof o[1].widgetOptions=="object"&&(o[1].widgetOptions=JSON.stringify(o[1].widgetOptions)),s.includes(o[0])?a.push(["ModifyColumn",c,o[0],o[1]]):a.push(["AddColumn",c,o[0],o[1]])}),a.length>0?(await grist.docApi.applyUserActions(a),alert(l("Structure imported successfully (be careful, new columns are hidden by default).")),p()):alert(l("No data to paste."))}else alert(l("The data in the clipboard is not in the correct format."))}else alert(l("No data present in the clipboard."))}function w(n){return Object.keys(n).filter(i=>i!="id"&&i!="manualSort"&&!i.startsWith("gristHelper"))}window.exporter=O,window.importer=I,window.switchColumns=v,window.switchProp=S,window.selectionTable=b,window.selectionColumn=C});
