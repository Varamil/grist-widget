(function(o){typeof define=="function"&&define.amd?define(o):o()})(function(){"use strict";let o,a,h=[WidgetSDK.newItem("table",null,"Target table","Select which table to manage.","Table",{type:"dropdown",event:{onchange:"selectionTable(this)"}})],m=[WidgetSDK.newItem("colaon",!0,"Selection","Select all columns or nothing.","Table structure",{event:{onClick:"switchColumns()"}}),WidgetSDK.newItem("columns",!0,"Columns","Select which columns to copy.","Table structure",{template:WidgetSDK.newItem("column_export",!0,"Copy","If checked, copy the column metadata.")}),WidgetSDK.newItem("export",null,"Copy","Copy metadata to the clipboard.","Table structure",{event:{onClick:"exporter()"},label:"Copy"}),WidgetSDK.newItem("import",null,"Paste","Paste metadata from the clipboard.","Table structure",{event:{onClick:"importer()"},label:"Paste"}),WidgetSDK.newItem("column",null,"Target column","Select which column to manage.","Column",{type:"dropdown",event:{onchange:"selectionColumn(this)"}})],f=[WidgetSDK.newItem("propaon",!0,"Selection","Select all properties or nothing.","Column properties",{event:{onClick:"switchProp()"}}),WidgetSDK.newItem("properties",null,"Properties","Select which properties to copy.","Column properties",{template:WidgetSDK.newItem("property_export",!0,"Copy","If checked, copy the property.")}),WidgetSDK.newItem("copy",null,"Copy","Copy properties to the clipboard.","Column properties",{event:{onClick:"copyProp()"},label:"Copy"}),WidgetSDK.newItem("paste",null,"Paste","Paste properties from the clipboard.","Column properties",{event:{onClick:"pasteProp()"},label:"Paste"})],t={},p,u,d;const w=["colId","type","widgetOptions","isFormula","formula","label","description","recalcWhen"],y=["Type","Options","Is formula","Formula","Label","Description","Recalc trigger"];window.addEventListener("load",async n=>{o=new WidgetSDK,a=await o.loadTranslations(["widget.js"]),o.initMetaData(!0),o.configureOptions([],"#config-view","#main-view",{}),o.ready({requiredAccess:"full",allowSelectBy:!1}),o.isLoaded().then(async()=>{o.parseOptions(h),o.parseOptions(m),o.parseOptions(f),o.initDone=!0,c()}),o.onMappingChange(c)});async function c(){if(o.initDone){const n=document.getElementById("main-view"),e=[""].concat(await grist.docApi.listTables());let r=o.getOptionsHtml(h,{table:p},{table:e});if(p){const l=g(u);t.columns||(t.colaon=!0,t.columns=l.map(i=>!0)),r+=o.getOptionsHtml(m,t,{columns:!0,column_export:l,column:[""].concat(l)}),d&&(t.properties||(t.propaon=!0,t.properties=w.slice(1).map(i=>!0)),r+=o.getOptionsHtml(f,t,{properties:!0,property_export:a(y)}))}r+=`<div style="color:red"><p>${a("This widget affects the structure of tables, so even though it has been tested in various situations, it is possible that the document may become corrupted after applying the changes.")}</p>
      <p>${a("It is always strongly recommended to use the Work on a copy feature provided by Grist, and then, if everything went well, apply the changes to the main document.")}</p>
      <p>${a("The widget is therefore provided as it is, and the author cannot be held responsible for any problems that the widget may cause.")}</p></div>`,n.innerHTML=r,o.setOptionsEvent(n)}}async function b(n){p=n.value,d=void 0,u=p?await o.meta.getMeta(p):void 0,t={},c()}async function C(n){d=n.value,t.column=d,c()}async function O(){t.columns&&(await o.readOptionValues(m,document.getElementById("main-view"),t),t.colaon=!t.colaon,t.columns=t.columns.map(n=>t.colaon),c())}async function v(){t.properties&&(await o.readOptionValues(f,document.getElementById("main-view"),t),t.propaon=!t.propaon,t.properties=t.properties.map(n=>t.propaon),c())}async function S(){const n=g(u);await o.readOptionValues(m,document.getElementById("main-view"),t);let e=[];n.forEach((r,l)=>{if(t.columns[l]){const i=u[r];e.push([i.colId,Object.fromEntries(w.map(s=>s==="widgetOptions"&&i[s]?[s,JSON.stringify(i[s])]:[s,i[s]]).filter(s=>!!s[1]))])}}),e.length>0?(await navigator.clipboard.writeText(JSON.stringify(e)),alert(a("Data has been copied into the clipboard."))):alert(a("No data to copy."))}async function I(){const n=await navigator.clipboard.readText();if(n){const e=JSON.parse(n);if(Array.isArray(e)&&e.length>0&&Array.isArray(e[0])&&e[0].length===2){const r=g(u);let l=[];e.forEach(i=>{i[1]&&(i[1]=Object.fromEntries(Object.entries(i[1]).filter(s=>!!s[1]))),i[1]&&i[1].widgetOptions&&typeof i[1].widgetOptions=="object"&&(i[1].widgetOptions=JSON.stringify(i[1].widgetOptions)),r.includes(i[0])?l.push(["ModifyColumn",p,i[0],i[1]]):l.push(["AddColumn",p,i[0],i[1]])}),l.length>0?(await grist.docApi.applyUserActions(l),alert(a("Structure imported successfully (be careful, new columns are hidden by default).")),c()):alert(a("No data to paste."))}else alert(a("The data in the clipboard is not in the correct format."))}else alert(a("No data present in the clipboard."))}async function T(){await o.readOptionValues(f,document.getElementById("main-view"),t);let n=u[d],e=w.slice(1).filter((r,l)=>t.properties[l]).map(r=>[r,n[r]]).filter(r=>!!r[1]);e.length>0?(e=Object.fromEntries(e),e.widgetOptions&&(e.widgetOptions=JSON.stringify(e.widgetOptions)),await navigator.clipboard.writeText(JSON.stringify({exportColumn:e})),alert(a("Data has been copied into the clipboard."))):alert(a("No data to copy."))}async function x(){const n=await navigator.clipboard.readText();if(n){const e=JSON.parse(n);e&&typeof e=="object"&&e.exportColumn?Object.keys(e.exportColumn).length>0?(e.exportColumn=Object.fromEntries(Object.entries(e.exportColumn).filter(r=>!!r[1])),e.exportColumn.widgetOptions&&typeof e.exportColumn.widgetOptions=="object"&&(e.exportColumn.widgetOptions=JSON.stringify(e.exportColumn.widgetOptions)),await grist.docApi.applyUserActions([["ModifyColumn",p,d,e.exportColumn]]),alert(a("Properties pasted successfully."))):alert(a("No data to paste.")):alert(a("The data in the clipboard is not in the correct format."))}else alert(a("No data present in the clipboard."))}function g(n){return Object.keys(n).filter(e=>e!="id"&&e!="manualSort"&&!e.startsWith("gristHelper"))}window.exporter=S,window.importer=I,window.switchColumns=O,window.switchProp=v,window.selectionTable=b,window.selectionColumn=C,window.copyProp=T,window.pasteProp=x});
