(function(n){typeof define=="function"&&define.amd?define(n):n()})(function(){"use strict";let n,i,y=[WidgetSDK.newItem("table",null,"Target table","Select which table to manage.","Table",{type:"dropdown",event:{onchange:"selectionTable(this)"}})],m=[WidgetSDK.newItem("colaon",!0,"Selection","Select all columns or nothing.","Table structure",{event:{onClick:"switchColumns()"}}),WidgetSDK.newItem("columns",!0,"Columns","Select which columns to copy.","Table structure",{template:WidgetSDK.newItem("column_export",!0,"Copy","If checked, copy the column metadata.")}),WidgetSDK.newItem("export",null,"Copy","Copy metadata to the clipboard.","Table structure",{event:{onClick:"exporter()"},label:"Copy"}),WidgetSDK.newItem("import_clipboard","","Data to paste","(optional) Paste metadata here.","Table structure",{type:"longstring",description:'On some browser (like Chrome), the access from the clipboard is denied, so you need to paste manually its content in the text area below (using ctrl+V) and then click on the "Paste" button.'}),WidgetSDK.newItem("import",null,"Paste","Paste metadata from the clipboard.","Table structure",{event:{onClick:"importer()"},label:"Paste"}),WidgetSDK.newItem("column",null,"Target column","Select which column to manage.","Column",{type:"dropdown",event:{onchange:"selectionColumn(this)"}})],h=[WidgetSDK.newItem("propaon",!0,"Selection","Select all properties or nothing.","Column properties",{event:{onClick:"switchProp()"}}),WidgetSDK.newItem("properties",null,"Properties","Select which properties to copy.","Column properties",{template:WidgetSDK.newItem("property_export",!0,"Copy","If checked, copy the property.")}),WidgetSDK.newItem("copy",null,"Copy","Copy properties to the clipboard.","Column properties",{event:{onClick:"copyProp()"},label:"Copy"}),WidgetSDK.newItem("paste_clipboard","","Data to paste","(optional) Paste metadata here.","Column properties",{type:"longstring",description:'On some browser (like Chrome), the access from the clipboard is denied, so you need to paste manually its content in the text area below (using ctrl+V) and then click on the "Paste" button.'}),WidgetSDK.newItem("paste",null,"Paste","Paste properties from the clipboard.","Column properties",{event:{onClick:"pasteProp()"},label:"Paste"})],t={},p,d,u;const f=["colId","type","widgetOptions","isFormula","formula","label","description","recalcWhen"],g=["Type","Options","Is formula","Formula","Label","Description","Recalc trigger"];window.addEventListener("load",async o=>{n=new WidgetSDK,i=await n.loadTranslations(["widget.js"]),n.initMetaData(!0),n.configureOptions([],"#config-view","#main-view",{}),n.ready({requiredAccess:"full",allowSelectBy:!1}),n.isLoaded().then(async()=>{n.parseOptions(y),n.parseOptions(m),n.parseOptions(h),n.initDone=!0,c()}),n.onMappingChange(c)});async function c(){if(n.initDone){const o=document.getElementById("main-view"),e=[""].concat(await grist.docApi.listTables());let r=n.getOptionsHtml(y,{table:p},{table:e});if(p){const l=w(d);t.columns||(t.colaon=!0,t.columns=l.map(a=>!0),t.import_clipboard=t.import_clipboard??"",t.paste_clipboard=t.paste_clipboard??""),r+=n.getOptionsHtml(m,t,{columns:!0,column_export:l,column:[""].concat(l)}),u&&(t.properties||(t.propaon=!0,t.properties=f.slice(1).map(a=>!0)),r+=n.getOptionsHtml(h,t,{properties:!0,property_export:i(g)}))}r+=`<div style="color:red"><p>${i("This widget affects the structure of tables, so even though it has been tested in various situations, during development, it became apparent that Grist was not sufficiently protected and that poorly formatted information could corrupt the document.")}</p>
      <p>${i("That being said, precautions have been taken on the widget side, but it is always strongly recommended to use the Work on a copy feature provided by Grist, and then, if everything went well, apply the changes to the main document.")}</p>
      <p>${i("The widget is therefore provided as it is, and the author cannot be held responsible for any problems that the widget may cause.")}</p></div>`,o.innerHTML=r,n.setOptionsEvent(o)}}async function b(o){p=o.value,u=void 0,d=p?await n.meta.getMeta(p):void 0,t={},c()}async function C(o){u=o.value,t.column=u,c()}async function O(){t.columns&&(await n.readOptionValues(m,document.getElementById("main-view"),t),t.colaon=!t.colaon,t.columns=t.columns.map(o=>t.colaon),c())}async function v(){t.properties&&(await n.readOptionValues(h,document.getElementById("main-view"),t),t.propaon=!t.propaon,t.properties=t.properties.map(o=>t.propaon),c())}async function S(){const o=w(d);await n.readOptionValues(m,document.getElementById("main-view"),t);let e=[];o.forEach((r,l)=>{if(t.columns[l]){const a=d[r];e.push([a.colId,Object.fromEntries(f.map(s=>s==="widgetOptions"&&a[s]?[s,JSON.stringify(a[s])]:[s,a[s]]).filter(s=>!!s[1]))])}}),e.length>0?(await navigator.clipboard.writeText(JSON.stringify(e)),alert(i("Data has been copied into the clipboard."))):alert(i("No data to copy."))}async function T(){let o;try{o=await navigator.clipboard.readText()}catch{if(o=document.getElementById("import_clipboard").value,!o){alert(i('Your browser denies access to clipboard, so you need to paste manually first its content into the previous section "Data to paste".'));return}}if(o)try{const e=JSON.parse(o);if(Array.isArray(e)&&e.length>0&&Array.isArray(e[0])&&e[0].length===2){const r=w(d);let l=[];e.forEach(a=>{a[1]&&(a[1]=Object.fromEntries(Object.entries(a[1]).filter(s=>!!s[1]))),a[1]&&a[1].widgetOptions&&typeof a[1].widgetOptions=="object"&&(a[1].widgetOptions=JSON.stringify(a[1].widgetOptions)),r.includes(a[0])?l.push(["ModifyColumn",p,a[0],a[1]]):l.push(["AddColumn",p,a[0],a[1]])}),l.length>0?(await grist.docApi.applyUserActions(l),alert(i("Structure imported successfully (be careful, new columns are hidden by default).")),c()):alert(i("No data to paste."))}else alert(i("The data in the clipboard is not in the correct format."))}catch{alert(i("The data in the clipboard is not in the correct format."))}else alert(i("No data present in the clipboard."))}async function I(){await n.readOptionValues(h,document.getElementById("main-view"),t);let o=d[u],e=f.slice(1).filter((r,l)=>t.properties[l]).map(r=>[r,o[r]]).filter(r=>!!r[1]);e.length>0?(e=Object.fromEntries(e),e.widgetOptions&&(e.widgetOptions=JSON.stringify(e.widgetOptions)),await navigator.clipboard.writeText(JSON.stringify({exportColumn:e})),alert(i("Data has been copied into the clipboard."))):alert(i("No data to copy."))}async function D(){let o;try{o=await navigator.clipboard.readText()}catch{if(o=document.getElementById("paste_clipboard").value,!o){alert(i('Your browser denies access to clipboard, so you need to paste manually first its content into the previous section "Data to paste".'));return}}if(o)try{const e=JSON.parse(o);e&&typeof e=="object"&&e.exportColumn?Object.keys(e.exportColumn).length>0?(e.exportColumn=Object.fromEntries(Object.entries(e.exportColumn).filter(r=>!!r[1])),e.exportColumn.widgetOptions&&typeof e.exportColumn.widgetOptions=="object"&&(e.exportColumn.widgetOptions=JSON.stringify(e.exportColumn.widgetOptions)),await grist.docApi.applyUserActions([["ModifyColumn",p,u,e.exportColumn]]),alert(i("Properties pasted successfully."))):alert(i("No data to paste.")):alert(i("The data in the clipboard is not in the correct format."))}catch{alert(i("The data in the clipboard is not in the correct format."))}else alert(i("No data present in the clipboard."))}function w(o){return Object.keys(o).filter(e=>e!="id"&&e!="manualSort"&&!e.startsWith("gristHelper"))}window.exporter=S,window.importer=T,window.switchColumns=O,window.switchProp=v,window.selectionTable=b,window.selectionColumn=C,window.copyProp=I,window.pasteProp=D});
