(function(t){typeof define=="function"&&define.amd?define(t):t()})(function(){"use strict";let t,a,w=[WidgetSDK.newItem("table",null,"Target table","Select which table to manage.","Table",{type:"dropdown",event:{onchange:"selectionTable(this)"}})],d=[WidgetSDK.newItem("colaon",!0,"Selection","Select all columns or nothing.","Table structure",{event:{onClick:"switchColumns()"}}),WidgetSDK.newItem("columns",!0,"Columns","Select which columns to copy.","Table structure",{template:WidgetSDK.newItem("column_export",!0,"Copy","If checked, copy the column metadata.")}),WidgetSDK.newItem("export",null,"Copy","Copy metadata to the clipboard.","Table structure",{event:{onClick:"exporter()"},label:"Copy"}),WidgetSDK.newItem("import",null,"Paste","Paste metadata from the clipboard.","Table structure",{event:{onClick:"importer()"},label:"Paste"}),WidgetSDK.newItem("column",null,"Target column","Select which column to manage.","Column",{type:"dropdown",event:{onchange:"selectionColumn(this)"}})],m=[WidgetSDK.newItem("propaon",!0,"Selection","Select all properties or nothing.","Column properties",{event:{onClick:"switchProp()"}}),WidgetSDK.newItem("properties",null,"Properties","Select which properties to copy.","Column properties",{template:WidgetSDK.newItem("property_export",!0,"Copy","If checked, copy the property.")}),WidgetSDK.newItem("copy",null,"Copy","Copy properties to the clipboard.","Column properties",{event:{onClick:"copyProp()"},label:"Copy"}),WidgetSDK.newItem("paste",null,"Paste","Paste properties from the clipboard.","Column properties",{event:{onClick:"pasteProp()"},label:"Paste"})],e={},s,p,g;const f=["colId","type","widgetOptions","isFormula","formula","label","description","recalcWhen"],y=["Type","Options","Is formula","Formula","Label","Description","Recalc trigger"];window.addEventListener("load",async i=>{t=new WidgetSDK,a=await t.loadTranslations(["widget.js"]),t.initMetaData(!0),t.configureOptions([],"#config-view","#main-view",{}),t.ready({requiredAccess:"full",allowSelectBy:!1}),t.isLoaded().then(async()=>{t.parseOptions(w),t.parseOptions(d),t.parseOptions(m),t.initDone=!0,c()}),t.onMappingChange(c)});async function c(){if(t.initDone){const i=document.getElementById("main-view"),o=[""].concat(await grist.docApi.listTables());let r=t.getOptionsHtml(w,{table:s},{table:o});if(s){const l=h(p);e.columns||(e.colaon=!0,e.columns=l.map(n=>!0)),r+=t.getOptionsHtml(d,e,{columns:!0,column_export:l,column:[""].concat(l)}),g&&(e.properties||(e.propaon=!0,e.properties=f.slice(1).map(n=>!0)),r+=t.getOptionsHtml(m,e,{properties:!0,property_export:a(y)}))}r+=`<div style="color:red"><p>${a("This widget affects the structure of tables, so even though it has been tested in various situations, it is possible that the document may become corrupted after applying the changes.")}</p>
      <p>${a("It is always strongly recommended to use the Work on a copy feature provided by Grist, and then, if everything went well, apply the changes to the main document.")}</p>
      <p>${a("The widget is therefore provided as it is, and the author cannot be held responsible for any problems that the widget may cause.")}</p></div>`,i.innerHTML=r,t.setOptionsEvent(i)}}async function b(i){s=i.value,g=void 0,p=s?await t.meta.getMeta(s):void 0,e={},c()}async function C(){e.columns&&(await t.readOptionValues(d,document.getElementById("main-view"),e),e.colaon=!e.colaon,e.columns=e.columns.map(i=>e.colaon),c())}async function v(){e.properties&&(await t.readOptionValues(m,document.getElementById("main-view"),e),e.propaon=!e.propaon,e.properties=e.properties.map(i=>e.propaon),c())}async function S(){const i=h(p);await t.readOptionValues(d,document.getElementById("main-view"),e);let o=[];i.forEach((r,l)=>{if(e.columns[l]){const n=p[r];o.push([n.colId,Object.fromEntries(f.map(u=>u==="widgetOptions"?[u,JSON.stringify(n[u])]:[u,n[u]]))])}}),o.length>0?(await navigator.clipboard.writeText(JSON.stringify(o)),alert(a("Data has been copied into the clipboard."))):alert(a("No data to copy."))}async function I(){const i=await navigator.clipboard.readText();if(i){const o=JSON.parse(i);if(console.log("Debug import",[i,o]),Array.isArray(o)&&o.length>0&&Array.isArray(o[0])&&o[0].length===2){const r=h(p);let l=[];o.forEach(n=>{n[1]&&n[1].widgetOptions&&typeof n[1].widgetOptions=="object"&&(n[1].widgetOptions=JSON.stringify(n[1].widgetOptions)),r.includes(n[0])?l.push(["ModifyColumn",s,n[0],n[1]]):l.push(["AddColumn",s,n[0],n[1]])}),l.length>0?(console.log("Debug action",l),await grist.docApi.applyUserActions(l),alert(a("Structure imported successfully (be careful, new columns are hidden by default).")),c()):alert(a("No data to paste."))}else alert(a("The data in the clipboard is not in the correct format."))}else alert(a("No data present in the clipboard."))}function h(i){return Object.keys(i).filter(o=>o!="id"&&o!="manualSort"&&!o.startsWith("gristHelper"))}window.exporter=S,window.importer=I,window.switchColumns=C,window.switchProp=v,window.selectionTable=b});
